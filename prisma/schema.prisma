generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customerId   String?       @unique
  chats        Chat[]
  chatbots     Chatbot[]
  password     Password?
  subscription Subscription?
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chatbot {
  id                   String      @id @default(uuid())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  userId               String
  publicName           String      @default("Your Chatbot")
  originalLogoFilepath String?
  croppedLogoFilepath  String?
  lastCrop             Json?
  themeColor           String      @default("zinc")
  introMessages        String[]    @default(["Hello, how can I help you today?"])
  openIcon             String      @default("plus")
  starterQuestions     String[]    @default(["What are your features?"])
  name                 String
  systemPrompt         String?
  model                String?     @default("gpt-3.5-turbo-0125")
  responseLength       String?     @default("short")
  containerRadius      String?     @default("1.0")
  openButtonText       String?
  widgetRestrictedUrls String[]    @default([])
  installed            Boolean     @default(false)
  embeddedOn           String?
  lastPingedAt         DateTime?
  chats                Chat[]
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  commonClusters       Cluster[]   @relation("CommonClusters")
  gapClusters          Cluster[]   @relation("GapClusters")
  documents            Document[]
  embeddings           Embedding[]
  labels               Label[]

  @@index([userId, createdAt(sort: Desc)])
}

model Cluster {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  commonChatbotId String
  gapChatbotId    String
  chatbotId       String
  label           String
  commonChatbot   Chatbot   @relation("CommonClusters", fields: [commonChatbotId], references: [id], onDelete: Cascade)
  gapChatbot      Chatbot   @relation("GapClusters", fields: [gapChatbotId], references: [id], onDelete: Cascade)
  messages        Message[]
}

model Chat {
  id         String         @id @default(uuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  userId     String?
  chatbotId  String
  name       String?        @default("Untitled Chat")
  aiInsights String?
  starred    Boolean?       @default(false)
  sessionId  String?
  deleted    Boolean        @default(false)
  seen       Boolean?       @default(false)
  status     TicketStatus?  @default(OPEN)
  elapsedMs  Int            @default(0)
  referrer   String?
  anonUser   AnonymousUser?
  chatbot    Chatbot        @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  user       User?          @relation(fields: [userId], references: [id])
  messages   Message[]
  labels     Label[]        @relation("ChatToLabel")

  @@index([chatbotId, deleted, createdAt])
}

model Label {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  color     String   @default("#ffffff")
  chatbotId String
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chats     Chat[]   @relation("ChatToLabel")
}

model AnonymousUser {
  id                   String   @id @default(cuid())
  sessionId            String   @unique
  chatId               String?  @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ip                   String?
  network              String?
  version              String?
  city                 String?
  region               String?
  region_code          String?
  country              String?
  country_code         String?
  country_code_iso3    String?
  country_name         String?
  country_capital      String?
  country_tld          String?
  country_area         Float?
  country_population   Float?
  continent_code       String?
  in_eu                Boolean?
  postal               String?
  latitude             Float?
  longitude            Float?
  latlong              String?
  timezone             String?
  utc_offset           String?
  country_calling_code String?
  currency             String?
  currency_name        String?
  languages            String?
  asn                  String?
  org                  String?
  hostname             String?
  ua                   String?
  browser_name         String?
  browser_version      String?
  browser_major        String?
  cpu_architecture     String?
  device_type          String?
  device_vendor        String?
  device_model         String?
  engine_name          String?
  engine_version       String?
  os_name              String?
  os_version           String?
  chat                 Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
}

model Document {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  content    String?
  url        String?
  filepath   String?
  chatbotId  String
  isPending  Boolean      @default(true)
  type       DocumentType @default(RAW)
  chatbot    Chatbot      @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  embeddings Embedding[]
}

model Embedding {
  id         String                @id @default(uuid())
  createdAt  DateTime              @default(now())
  embedding  Unsupported("vector")
  documentId String
  chatbotId  String
  content    String
  chatbot    Chatbot               @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  document   Document              @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([chatbotId])
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  content   String
  chatId    String
  seen      Boolean? @default(false)
  clusterId String?
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  cluster   Cluster? @relation(fields: [clusterId], references: [id])

  @@index([chatId, role])
}

model Plan {
  id            String         @id @unique
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  prices        Price[]
  subscriptions Subscription[]
}

model Price {
  id            String         @id @unique
  planId        String
  amount        Int
  currency      String
  interval      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  plan          Plan           @relation(fields: [planId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
}

model Subscription {
  id                 String   @id @unique
  userId             String   @unique
  planId             String
  priceId            String
  interval           String
  status             String
  currentPeriodStart Int
  currentPeriodEnd   Int
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  plan               Plan     @relation(fields: [planId], references: [id])
  price              Price    @relation(fields: [priceId], references: [id])
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum DocumentType {
  WEBSITE
  FILE
  RAW
}

enum TicketStatus {
  OPEN
  CLOSED
}
