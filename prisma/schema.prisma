datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  password     Password?
  chatbots     Chatbot[]
  chats        Chat[]
  customerId   String?       @unique
  subscription Subscription?
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Chatbot {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  chats      Chat[]
  publicName String   @default("Your Chatbot")

  originalLogoFilepath String?
  croppedLogoFilepath  String?
  lastCrop             Json?

  themeColor       String      @default("zinc")
  introMessages    String[]    @default(["Hello, how can I help you today?"])
  openIcon         String      @default("plus") // plus, chevron, chat
  starterQuestions String[]    @default(["What are your features?"])
  name             String
  systemPrompt     String?
  model            String?     @default("gpt-3.5-turbo-0125")
  responseLength   String?     @default("short")
  documents        Document[]
  embeddings       Embedding[]

  containerRadius String? @default("1.0")

  openButtonText String?

  widgetRestrictedUrls String[] @default([])
}

model Chat {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  chatbot    Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId  String
  messages   Message[]
  name       String?   @default("Untitled Chat")
  aiInsights String?
  starred    Boolean?  @default(false)
  sessionId  String?
  deleted    Boolean   @default(false)
}

// https://ipapi.co/json/
// https://docs.uaparser.dev/
model AnonymousUser {
  id                   String   @id @default(cuid())
  sessionId            String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ip                   String?
  network              String?
  version              String?
  city                 String?
  region               String?
  region_code          String?
  country              String?
  country_code         String?
  country_code_iso3    String?
  country_name         String?
  country_capital      String?
  country_tld          String?
  country_area         Float?
  country_population   Float?
  continent_code       String?
  in_eu                Boolean?
  postal               String?
  latitude             Float?
  longitude            Float?
  latlong              String?
  timezone             String?
  utc_offset           String?
  country_calling_code String?
  currency             String?
  currency_name        String?
  languages            String?
  asn                  String?
  org                  String?
  hostname             String?
  ua                   String?
  browser_name         String?
  browser_version      String?
  browser_major        String?
  cpu_architecture     String?
  device_type          String?
  device_vendor        String?
  device_model         String?
  engine_name          String?
  engine_version       String?
  os_name              String?
  os_version           String?
}

model Document {
  id         String       @id @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  name       String
  content    String?
  url        String?
  filepath   String?
  chatbot    Chatbot      @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId  String
  embeddings Embedding[]
  isPending  Boolean      @default(true)
  type       DocumentType @default(RAW)
}

model Embedding {
  id         String                      @id @default(uuid())
  createdAt  DateTime                    @default(now())
  embedding  Unsupported("vector(1536)")
  document   Document                    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  chatbot    Chatbot                     @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId  String
  content    String

  @@index(fields: [chatbotId])
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  seen      Boolean? @default(false)
}

// subscription models
model Plan {
  id            String         @id @unique
  name          String
  description   String?
  prices        Price[]
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Price {
  id     String @id @unique
  plan   Plan   @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  planId String

  amount        Int
  currency      String
  interval      String
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id     String @id @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  plan               Plan    @relation(fields: [planId], references: [id])
  planId             String
  price              Price   @relation(fields: [priceId], references: [id])
  priceId            String
  interval           String
  status             String
  currentPeriodStart Int
  currentPeriodEnd   Int
  cancelAtPeriodEnd  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentType {
  WEBSITE
  FILE
  RAW
}
